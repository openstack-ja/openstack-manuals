msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2013-07-31 10:43+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: doc/src/docbkx/openstack-security/ch021_paste-and-middleware.xml:63
#: doc/src/docbkx/openstack-security/ch038_transport-security.xml:129
#: doc/src/docbkx/openstack-security/ch052_devices.xml:85
msgid "Mandatory Access Controls"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:3
msgid "Hardening the Virtualization Layers"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:4
msgid ""
"In the beginning of this chapter we discuss the use of both physical and "
"virtual hardware by instances, the associated security risks, and some "
"recommendations for mitigating those risks. We conclude the chapter with a "
"discussion of sVirt, an open source project for integrating SELinux "
"mandatory access controls with the virtualization components."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:6
msgid "Physical Hardware (PCI Passthrough)"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:7
msgid ""
"Many hypervisors offer a functionality known as PCI passthrough. This allows "
"an instance to have direct access to a piece of hardware on the node. For "
"example, this could be used to allow instances to access video cards "
"offering the compute unified device architecture (CUDA) for high performance "
"computation. This feature carries two types of security risks: direct memory "
"access and hardware infection."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:8
msgid ""
"Direct memory access (DMA) is a feature that permits certain hardware "
"devices to access arbitrary physical memory addresses in the host computer. "
"Often video cards have this capability. However, an instance should not be "
"given arbitrary physical memory access because this would give it full view "
"of both the host system and other instances running on the same node. "
"Hardware vendors use an input/output memory management unit (IOMMU) to "
"manage DMA access in these situations. Therefore, cloud architects should "
"ensure that the hypervisor is configured to utilize this hardware feature."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:10
msgid ""
"KVM: http://www.linux-kvm.org/page/How_to_assign_devices_with_VT-d_in_KVM"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:13
msgid "Xen: http://wiki.xen.org/wiki/VTd_HowTo"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:16
msgid "Note: The IOMMU feature is marketed as VT-d by Intel and AMD-Vi by AMD."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:17
msgid ""
"A hardware infection occurs when an instance makes a malicious modification "
"to the firmware or some other part of a device. As this device is used by "
"other instances, or even the host OS, the malicious code can spread into "
"these systems. The end result is that one instance can run code outside of "
"its security domain. This is a potential problem in any hardware sharing "
"scenario. The problem is specific to this scenario because it is harder to "
"reset the state of physical hardware than virtual hardware."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:18
msgid ""
"Solutions to the hardware infection problem are domain specific. The "
"strategy is to identify how an instance can modify hardware state then "
"determine how to reset any modifications when the instance is done using the "
"hardware. For example, one option could be to re-flash the firmware after "
"use. Clearly there is a need to balance hardware longevity with security as "
"some firmwares will fail after a large number of writes. TPM technology, "
"described in <literal>link:Management/Node Bootstrapping</literal>, provides "
"a solution for detecting unauthorized firmware changes. Regardless of the "
"strategy selected, it is important to understand the risks associated with "
"this kind of hardware sharing so that they can be properly mitigated for a "
"given deployment scenario."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:19
msgid ""
"Additionally, due to the risk and complexities associated with PCI "
"passthrough, it should be disabled by default. If enabled for a specific "
"need, you will need to have appropriate processes in place to ensure the "
"hardware is clean before re-issue."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:22
msgid "Virtual Hardware (QEMU)"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:23
msgid ""
"When running a virtual machine, virtual hardware is a software layer that "
"provides the hardware interface for the virtual machine. Instances use this "
"functionality to provide network, storage, video, and other devices that may "
"be needed. With this in mind, most instances in your environment will "
"exclusively use virtual hardware, with a minority that will require direct "
"hardware access. The major open source hypervisors use QEMU for this "
"functionality. While QEMU fills an important need for virtualization "
"platforms, it has proven to be a very challenging software project to write "
"and maintain. Much of the functionality in QEMU is implemented with low-"
"level code that is difficult for most developers to comprehend. Furthermore, "
"the hardware virtualized by QEMU includes many legacy devices that have "
"their own set of quirks. Putting all of this together, QEMU has been the "
"source of many security problems, including hypervisor breakout attacks."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:39
msgid ""
"For the reasons stated above, it is important to take proactive steps to "
"harden QEMU. We recommend three specific steps: minimizing the codebase, "
"using compiler hardening, and using mandatory access controls, for example: "
"sVirt, SELinux, or AppArmor."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:41
msgid "Minimizing the Qemu Codebase"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:42
msgid ""
"One classic security principle is to remove any unused components from your "
"system. QEMU provides support for many different virtual hardware devices. "
"However, only a small number of devices are needed for a given instance. "
"Most instances will use the virtio devices. However, some legacy instances "
"will need access to specific hardware, which can be specified using glance "
"metadata:"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:49
msgid ""
"A cloud architect should decide what devices to make available to cloud "
"users. Anything that is not needed should be removed from QEMU. This step "
"requires recompiling QEMU after modifying the options passed to the QEMU "
"configure script. For a complete list of up-to-date options simply run "
"<literal> ./configure --help </literal> from within the QEMU source "
"directory. Decide what is needed for your deployment, and disable the "
"remaining options."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:52
msgid "Compiler Hardening"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:53
msgid ""
"The next step is to harden QEMU using compiler hardening options. Modern "
"compilers provide a variety of compile time options to improve the security "
"of the resulting binaries. These features, which we will describe in more "
"detail below, include relocation read-only (RELRO), stack canaries, never "
"execute (NX), position independent executable (PIE), and address space "
"layout randomization (ASLR)."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:54
msgid ""
"Many modern linux distributions already build QEMU with compiler hardening "
"enabled, so you may want to verify your existing executable before "
"proceeding with the information below. One tool that can assist you with "
"this verification is called <literal> checksec.sh </literal> (http://www."
"trapkit.de/tools/checksec.html)."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:56
msgid ""
"<emphasis>RELocation Read-Only (RELRO)</emphasis> : Hardens the data "
"sections of an executable. Both full and partial RELRO modes are supported "
"by gcc. For QEMU full RELRO is your best choice. This will make the global "
"offset table read-only and place various internal data sections before the "
"program data section in the resulting executable."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:59
msgid ""
"<emphasis>Stack Canaries</emphasis> : Places values on the stack and "
"verifies their presence to help prevent buffer overflow attacks."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:62
msgid ""
"<emphasis>Never eXecute (NX)</emphasis> : Also known as Data Execution "
"Prevention (DEP), ensures that data sections of the executable can not be "
"executed."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:65
msgid ""
"<emphasis>Position Independent Executable (PIE)</emphasis> : Produces a "
"position independent executable, which is necessary for ASLR.  "
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:68
msgid ""
"<emphasis>Address Space Layout Randomization (ASLR)</emphasis> : This "
"ensures that both code and data regions will be randomized. Enabled by the "
"kernel (all modern linux kernels support ASLR), when the executable is built "
"with PIE."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:71
msgid ""
"Putting this all together, and adding in some additional useful protections, "
"we recommend the following compiler options for gcc when compiling QEMU:"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:74
msgid ""
"We recommend testing your QEMU executable file after it is compiled to "
"ensure that the compiler hardening worked properly."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:75
msgid ""
"Most cloud deployments will not want to build software such as QEMU by hand. "
"It is better to use packaging to ensure that the process is repeatable and "
"to ensure that the end result can be easily deployed throughout the cloud. "
"The references below provide some additional details on applying compiler "
"hardening options to existing packages."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:77
msgid "DEB packages: http://wiki.debian.org/HardeningWalkthrough "
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:80
msgid ""
"RPM packages: http://fedoraproject.org/wiki/How_to_create_an_RPM_package"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:86
msgid ""
"Compiler hardening makes it more difficult to attack the QEMU process. "
"However, if an attacker does succeed, we would like to limit the impact of "
"the attack. Mandatory access controls accomplish this by restricting the "
"privileges on QEMU process to only what is needed. This can be accomplished "
"using sVirt / SELinux or AppArmor. When using sVirt, SELinux is configured "
"to run every QEMU process under a different security context.  AppArmor can "
"be configured to provide similar functionality. We provide more details on "
"sVirt in the instance isolation section below."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:90
msgid "sVirt: SELinux + Virtualization"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:91
msgid ""
"With unique kernel-level architecture and National Security Agency (NSA) "
"developed security mechanisms, KVM provides foundational isolation "
"technologies for multitenancy. With developmental origins dating back to "
"2002, the Secure Virtualization (sVirt) technology is the application of "
"SELinux against modern day virtualization. SELinux, which was designed to "
"apply separation control based upon labels, has been extended to provide "
"isolation between virtual machine processes, devices, data files and system "
"processes acting upon their behalf."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:92
msgid ""
"OpenStack's sVirt implementation aspires to protect hypervisor hosts and "
"virtual machines against two primary threat vectors:"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:94
msgid ""
"<emphasis role=\"bold\">Hypervisor threats</emphasis> A compromised "
"application running within a virtual machine attacks the hypervisor to "
"access underlying resources (e.g. the host OS, applications, or devices "
"within the physical machine). This is a threat vector unique to "
"virtualization and represents considerable risk as the underlying real "
"machine can be compromised due to vulnerability in a single virtual "
"application."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:97
msgid ""
"<emphasis role=\"bold\">Virtual Machine (multi-tenant) threats</emphasis> A "
"compromised application running within a VM attacks the hypervisor to access/"
"control another virtual machine and its resources. This is a threat vector "
"unique to virtualization and represents considerable risk as a multitude of "
"virtual machine file images could be compromised due to vulnerability in a "
"single application. This virtual network attack is a major concern as the "
"administrative techniques for protecting real networks do not directly apply "
"to the virtual environment."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:109
msgid ""
"Each KVM-based virtual machine is a process which is labeled by SELinux, "
"effectively establishing a security boundary around each virtual machine. "
"This security boundary is monitored and enforced by the Linux kernel, "
"restricting the virtual machine's access to resources outside of its "
"boundary such as host machine data files or other VMs."
msgstr ""

#. When image changes, this message will be marked fuzzy or untranslated for you.
#. It doesn't matter what you translate it to: it's not used at all.
#: doc/src/docbkx/openstack-security/ch052_devices.xml:111
#: doc/src/docbkx/openstack-security/ch052_devices.xml:114
msgid ""
"@@image: 'static/sVirt Diagram 1.png'; md5=ffcdbb45d9054670ad4c270a7c7d3925"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:117
msgid ""
"As shown above, sVirt isolation is provided regardless of the guest "
"Operating System running inside the virtual machine -- Linux or Windows VMs "
"can be used. Additionally, many Linux distributions provide SELinux within "
"the operating system, allowing the virtual machine to protect internal "
"virtual resources from threats. "
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:119
msgid "Labels and Categories"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:120
msgid ""
"KVM-based virtual machine instances are labelled with their own SELinux data "
"type, known as svirt_image_t. Kernel level protections prevent unauthorized "
"system processes, such as malware, from manipulating the virtual machine "
"image files on disk. When virtual machines are powered off, images are "
"stored as svirt_image_t as shown below:"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:126
msgid ""
"The svirt_image_t label uniquely identifies image files on disk, allowing "
"for the SELinux policy to restrict access. When a KVM-based Nova image is "
"powered on, sVirt appends a random numerical identifier to the image. sVirt "
"is technically capable of assigning numerical identifiers to 524,288 virtual "
"machines per hypervisor node, however OpenStack deployments are highly "
"unlikely to encounter this limitation."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:127
msgid "An example of the sVirt category identifier is shown below:"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:133
msgid "Booleans"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:134
msgid ""
"To ease the administrative burden of managing SELinux, many enterprise Linux "
"platforms utilize SELinux Booleans to quickly change the security posture of "
"sVirt."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:135
msgid ""
"Red Hat Enterprise Linux-based KVM deployments utilize the following sVirt "
"booleans:"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:142
msgid "sVirt SELinux Boolean"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:143
msgid " Description"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:146
msgid "virt_use_common"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:147
msgid "Allow virt to use serial/parallel communication ports."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:150
msgid "virt_use_fusefs"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:151
msgid "Allow virt to read FUSE mounted files."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:154
msgid "virt_use_nfs"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:155
msgid "Allow virt to manage NFS mounted files."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:158
msgid "virt_use_samba"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:159
msgid "Allow virt to manage CIFS mounted files."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:162
msgid "virt_use_sanlock"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:163
msgid "Allow confined virtual guests to interact with the sanlock."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:166
msgid "virt_use_sysfs"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:167
msgid "Allow virt to manage device configuration (PCI)."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:170
msgid "virt_use_usb"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:171
msgid "Allow virt to use USB devices."
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:174
msgid "virt_use_xserver"
msgstr ""

#: doc/src/docbkx/openstack-security/ch052_devices.xml:175
msgid "Allow virtual machine to interact with the X Window System."
msgstr ""
